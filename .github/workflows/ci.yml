name: CI
on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache svm
        uses: actions/cache@v4
        with:
          path: ~/.svm
          key: svm-${{ runner.os }}-${{ hashFiles('contracts/foundry.toml') }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install pnpm
        run: corepack enable
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run CI
        run: make ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GHCR
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push bundler image
        uses: docker/build-push-action@v5
        with:
          context: ./services/bundler
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ghcr.io/${{ github.repository_owner }}/zfa-bundler:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ghcr.io/${{ github.repository_owner }}/zfa-web:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: artifacts

  slither-analysis:
    runs-on: ubuntu-latest
    needs: build # Optional: run after build job, or run in parallel
    steps:
      - uses: actions/checkout@v4

      - name: Build Slither Docker image
        run: docker build -t slither-analyzer -f Dockerfile.slither .

      - name: Run Slither Analysis
        run: docker run --rm slither-analyzer

      # Optional: Upload Slither report as artifact
      # - name: Upload Slither Report
      #   if: failure() # Or always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: slither-report
      #     path: slither_output.txt # Assuming run-slither.sh outputs to a file
